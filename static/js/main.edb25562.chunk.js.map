{"version":3,"sources":["hooks/use-boolean.js","hooks/use-toggle.js","hooks/use-number.js","hooks/use-measure-window.js","hooks/use-input.js","components/WindowMeasure.js","components/Counter.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useBoolean","initValue","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","value","setValue","useToggle","_useBoolean","_useBoolean2","inverse","useNumber","initialValue","useMeasureWindow","width","window","outerWidth","height","outerHeight","size","setSize","updateSize","e","target","useEffect","addEventListener","removeEventListener","objectSpread","useInput","onChange","WindowMeasure","_useMeasureWindow","react_default","a","createElement","concat","Counter","_useNumber","_useNumber2","counter","increase","decrease","Fragment","onClick","Form","email","password","assign","type","App","toggle","className","components_Counter","components_WindowMeasure","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAQeA,EANI,WAAuB,IAAtBC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAAG,EACdC,mBAASL,GADKM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjCK,EADiCH,EAAA,GAC1BI,EAD0BJ,EAAA,GAGxC,MAAO,CAACG,EADO,kBAAMC,GAAUD,IACRC,ICKVC,EARG,WAAuB,IAAtBX,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAAW,EACbb,EAAWC,GADEa,EAAAN,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAEvC,MAAO,CACLH,MAHqCI,EAAA,GAIrCC,QAJqCD,EAAA,KCM1BE,EAPG,WAAsB,IAArBC,EAAqBf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,EAAMG,EACZC,mBAASW,GADGV,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC/BK,EAD+BH,EAAA,GACxBI,EADwBJ,EAAA,GAKtC,MAAO,CAACG,EAHS,kBAAMC,EAAS,SAAAD,GAAK,OAAIA,EAAQ,KAChC,kBAAMC,EAAS,SAAAD,GAAK,OAAIA,EAAQ,KAEdC,WCkBtBO,EAtBU,WAAM,IAAAb,EACLC,mBAAS,CAC/Ba,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cAHYhB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBmB,EADsBjB,EAAA,GAChBkB,EADgBlB,EAAA,GAKvBmB,EAAa,SAAAC,GACjBF,EAAQ,CACNN,MAAOQ,EAAEC,OAAOP,WAChBC,OAAQK,EAAEC,OAAOL,eASrB,OANAM,oBAAU,WAER,OADAT,OAAOU,iBAAiB,SAAUJ,GAC3B,WACLN,OAAOW,oBAAoB,QAASL,MAGjClB,OAAAwB,EAAA,EAAAxB,CAAA,GACFgB,ICNQS,EAZE,WAAM,IAAA5B,EACKC,mBAAS,IADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACPI,EADOJ,EAAA,GAMrB,MAAO,CACLG,QACAwB,SANe,SAAAP,GACfhB,EAASgB,EAAEC,OAAOlB,UCQPyB,EAVO,WAAM,IAAAC,EACAlB,IAAlBC,EADkBiB,EAClBjB,MAAOG,EADWc,EACXd,OACf,OACEe,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,4BAAAC,OAAuBrB,EAAvB,SAAAqB,OAAoClB,EAApC,UCKSmB,EAXC,WAAM,IAAAC,EACgB1B,EAAU,GAD1B2B,EAAAnC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GACfE,EADeD,EAAA,GACNE,EADMF,EAAA,GACIG,EADJH,EAAA,GAEpB,OACEN,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,SAAP,KACEV,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,6BAAqBK,EAArB,UACAP,EAAAC,EAAAC,cAAA,UAAQS,QAASH,GAAjB,YACAR,EAAAC,EAAAC,cAAA,UAAQS,QAASF,GAAjB,cCNS,SAASG,IACtB,IAAMC,EAAQjB,EAAS,IACjBkB,EAAWlB,EAAS,IAC1B,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAA/B,OAAA4C,OAAA,CAAOC,KAAK,QAAWH,KAEzBb,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAA/B,OAAA4C,OAAA,CAAOC,KAAK,YAAeF,KAE7Bd,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,UAAQc,KAAK,UAAb,sBCMOC,EAjBH,WACV,IAAMC,EAAS3C,GAAU,GAEzB,OACEyB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQS,QAASO,EAAOxC,SACpBwC,EAAO7C,MAAiB,OAAT,OADnB,YAGC6C,EAAO7C,OAAS2B,EAAAC,EAAAC,cAACkB,EAAD,OAEnBpB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACU,EAAD,QCLcU,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.edb25562.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useBoolean = (initValue = false) => {\r\n  const [value, setValue] = useState(initValue);\r\n  const toggle = () => setValue(!value);\r\n  return [value, toggle, setValue];\r\n};\r\n\r\nexport default useBoolean;\r\n","import useBoolean from \"./use-boolean\";\r\n\r\nconst useToggle = (initValue = false) => {\r\n  const [toggle, inverse] = useBoolean(initValue);\r\n  return {\r\n    value: toggle,\r\n    inverse\r\n  };\r\n};\r\n\r\nexport default useToggle;\r\n","import { useState } from \"react\";\r\nconst useNumber = (initialValue = 0) => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const increase = () => setValue(value => value + 1);\r\n  const decrease = () => setValue(value => value - 1);\r\n\r\n  return [value, increase, decrease, setValue];\r\n};\r\nexport default useNumber;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useMeasureWindow = () => {\r\n  const [size, setSize] = useState({\r\n    width: window.outerWidth,\r\n    height: window.outerHeight\r\n  });\r\n  const updateSize = e => {\r\n    setSize({\r\n      width: e.target.outerWidth,\r\n      height: e.target.outerHeight\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateSize);\r\n    return () => {\r\n      window.removeEventListener(\"risze\", updateSize);\r\n    };\r\n  });\r\n  return {\r\n    ...size\r\n  };\r\n};\r\n\r\nexport default useMeasureWindow;\r\n","import { useState } from \"react\";\r\n\r\nconst useInput = () => {\r\n  const [value, setValue] = useState(\"\");\r\n  const onChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  return {\r\n    value,\r\n    onChange\r\n  };\r\n};\r\n\r\nexport default useInput;\r\n","import React from \"react\";\r\nimport { useMeasureWindow } from \"../hooks\";\r\n\r\nconst WindowMeasure = () => {\r\n  const { width, height } = useMeasureWindow();\r\n  return (\r\n    <div>\r\n      <h2>WindowMeasure solution</h2>\r\n      <p>{`Window size is: ${width}px X ${height}px.`}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WindowMeasure;\r\n","import React from \"react\";\r\nimport { useNumber } from \"../hooks\";\r\nconst Counter = () => {\r\n  let [counter, increase, decrease] = useNumber(0);\r\n  return (\r\n    <React.Fragment>\r\n      <h2>Counter solution</h2>\r\n      <p>You have clicked {counter} times</p>\r\n      <button onClick={increase}>Increase</button>\r\n      <button onClick={decrease}>Decrease</button>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport { useInput } from \"../hooks\";\r\n\r\nexport default function Form() {\r\n  const email = useInput(\"\");\r\n  const password = useInput(\"\");\r\n  return (\r\n    <div>\r\n      <h2>Form solution</h2>\r\n      <p>\r\n        <input type=\"text\" {...email} />\r\n      </p>\r\n      <p>\r\n        <input type=\"password\" {...password} />\r\n      </p>\r\n      <p>\r\n        <button type=\"submit\">Submit</button>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Counter, Form, WindowMeasure } from \"./components\";\nimport { useToggle } from \"./hooks\";\nimport \"./App.css\";\n\nconst App = () => {\n  const toggle = useToggle(true);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <button onClick={toggle.inverse}>\n          {!toggle.value ? \"Show\" : \"Hide\"} counter\n        </button>\n        {toggle.value && <Counter />}\n      </div>\n      <WindowMeasure />\n      <Form />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}